# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools

default_platform(:ios)

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: false
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
  desc "Push a new beta build to firebase"
  lane :firebase do
    project = 'Runner.xcodeproj'

    appicon(
       appicon_devices: [:ipad, :iphone, :ios_marketing],
       appicon_path: "Runner/Assets.xcassets",
       appicon_image_file: '../assets/images/app_iconx1024.png'
    )

    DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
    PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
    TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
    TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]

    # setup certs.
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    match(
        type: 'appstore',
        app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
        git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"]),
        readonly: true,
        keychain_name: keychain_name,
        keychain_password: keychain_password
    )

    build_app(workspace: "Runner.xcworkspace", scheme: "Runner", export_xcargs: "-allowProvisioningUpdates")
    firebase_app_distribution(
            app: "1:400199897683:ios:ce8c89497900217008aca6",
            release_notes: "Lots of amazing new features to test out!",
            groups: "teamsfuse",
    )
  end

  desc "Lane just to get the api key for apple"
  lane :upload_metadata do
      api_key = app_store_connect_api_key(
         key_id: "8X8J2VC32L",
         issuer_id: "fc631508-7672-4236-a15a-21063621560e",
         key_filepath: "./app-store-api.p8",
         duration: 1200, # optional
         in_house: false, # optional but may be required if using match/sigh
       )
    deliver(
      submit_for_review: false,
      force: true,
      metadata_path: "./metadata",
      api_key: api_key,
      skip_binary_upload: true,
      precheck_include_in_app_purchases: false,
    )
  end

  desc "Push a new beta build to TestFlight"
  lane :beta do |options|
    github_api_token = ENV["FL_GITHUB_RELEASE_API_TOKEN"]
    apple_api_p8 = "./app-store-api.p8"
    UI.user_error!("Please provide a GitHub API token using `FL_GITHUB_RELEASE_API_TOKEN`") if github_api_token.to_s.length == 0
    UI.user_error!("Please provide a version using `version`") if options[:version].to_s.length == 0
    version = options[:version]
    @build_name=options[:version].delete("v")

    DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
    DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
    PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
    TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
    TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]

    project = 'Runner.xcodeproj'

    begin
      commit_version_bump(
        message: "Version Bump to v#{@build_name}",
        xcodeproj: "./Runner.xcodeproj",
        force: true,
      )
      add_git_tag(
        tag: version,
        force: true,
      )
      push_to_git_remote(tags: true, force: true)
    rescue => error
      puts error
      puts "Error commiting version number"
    end

    version = get_version_number(xcodeproj: project,)
    desc "Version $version"

    api_key = app_store_connect_api_key(
       key_id: "D39Z87Q2S3",
       issuer_id: "fc631508-7672-4236-a15a-21063621560e",
       key_filepath: "./app-store-api.p8",
       duration: 1200, # optional
       in_house: false, # optional but may be required if using match/sigh
    )

    release=get_github_release(url: "pinkfish/teamsfuse", version: options[:version], api_token: github_api_token)

    puts release["name"]

    body = release["body"]

    # Write the release notes out to the metadata.
    File.open('metadata/en-US/releast_notes.text', 'w') do |file|
      file.write(body)
    end

    appicon(
       appicon_devices: [:ipad, :iphone, :ios_marketing],
       appicon_path: "Runner/Assets.xcassets",
       appicon_image_file: '../assets/images/app_iconx1024.png'
    )

    # setup certs.
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    match(
        type: 'appstore',
        app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
        git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"]),
        readonly: true,
        clone_branch_directly: true,
        shallow_clone: true,
        keychain_name: keychain_name,
        keychain_password: keychain_password
    )

    # Build the app
    #build_app(workspace: "Runner.xcworkspace", scheme: "Runner", export_xcargs: "-allowProvisioningUpdates")
    gym(
      configuration: "Release",
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
      export_method: "app-store",
      clean: false,
    )

    # Upload the app.
    #upload_to_testflight(changelog: body)

    deliver(
      submit_for_review: true,
      force: true,
      metadata_path: "./metadata",
      api_key: api_key,
      precheck_include_in_app_purchases: false,
      username: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      ipa: "./Runner.ipa"
    )

    delete_temp_keychain(keychain_name)
  end

  desc "Push a new beta build to TestFlight"
  lane :beta_local do |options|
    apple_api_p8 = "./app-store-api.p8"
    UI.user_error!("Please provide a version using `version`") if options[:version].to_s.length == 0
    version = options[:version]
    @build_name=options[:version].delete("v")

    DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
    DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
    TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
    TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]

    project = 'Runner.xcodeproj'

    version = get_version_number(xcodeproj: project,)
    desc "Version $version"


    api_key = app_store_connect_api_key(
       key_id: "D39Z87Q2S3",
       issuer_id: "fc631508-7672-4236-a15a-21063621560e",
       key_filepath: "./app-store-api.p8",
       duration: 1200, # optional
       in_house: false, # optional but may be required if using match/sigh
    )

    appicon(
       appicon_devices: [:ipad, :iphone, :ios_marketing],
       appicon_path: "Runner/Assets.xcassets",
       appicon_image_file: '../assets/images/app_iconx1024.png'
    )

    # setup certs.
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    match(
        type: 'appstore',
        app_identifier: "com.teamfuse.flutterfuse",
        git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"]),
        readonly: true,
        keychain_name: keychain_name,
        keychain_password: keychain_password
    )

    # Build the app
    #build_app(workspace: "Runner.xcworkspace", scheme: "Runner", export_xcargs: "-allowProvisioningUpdates")
    gym(
      configuration: "Release",
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
      export_method: "app-store",
      clean: false,
    )

    # Upload the app.
    deliver(
      submit_for_review: true,
      force: true,
      metadata_path: "./metadata",
      api_key: api_key,
      precheck_include_in_app_purchases: false,
      username: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      ipa: "./Runner.ipa"
    )
    delete_temp_keychain(keychain_name)
  end

  desc "Generate new localized screenshots"
  lane :screenshots do
    capture_screenshots(workspace: "Runner.xcworkspace", scheme: "Runner")
  end
end

