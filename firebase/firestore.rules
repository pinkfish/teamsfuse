rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {


    // [READ] Data that exists on the Firestore document
    function existingData() {
      return resource.data;
    }
    // [WRITE] Data that is sent to a Firestore document
    function incomingData() {
      return request.resource.data;
    }

    function isSignedInOnly() {
      return request.auth != null;
    }

    function isSignedIn() {
      return request.auth != null &&
          request.auth.token != null &&
          "email_verified" in request.auth.token &&
          request.auth.token.email_verified == true;
    }

    function isUserOrAdmin(data) {
      return data.data.users[request.auth.uid].added ||
        request.auth.uid in data.data.admins ||
        data.data.isPublic;
    }

    function isAdmin(data) {
      return request.auth.uid in data.admins;
    }

    function isPublicVisible() {
      return "isPublic" in existingData() &&
        existingData().isPublic;
    }

    match /Clubs/{club} {
      allow read: if isSignedIn() || 
         isPublicVisible();
      // Only allow writes when the member is setup correctly.
      allow update, delete: if isSignedIn() &&
          existingData().members[request.auth.uid].admin;
      allow create: if isSignedIn() &&
          incomingData().members[request.auth.uid].admin;
    }

    match /Games/{game} {
      allow read: if isSignedIn() &&
         isUserOrAdmin(get(/databases/$(database)/documents/Seasons/$(existingData().seasonUid)));
      allow update, delete: if isSignedIn() &&
         isAdmin(get(/databases/$(database)/documents/Seasons/$(resource.seasonUid)));
      allow list: if isSignedIn();
      // Only allow a create if the shared data exists and the team exists.
      allow create: if isSignedIn() &&
          exists(/databases/$(database)/documents/GamesShared/$(incomingData().sharedDataUid)) &&
          exists(/databases/$(database)/documents/Teams/$(incomingData().teamUid));
    }

    match /GamesShared/{sharedGame} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }

    match /Invites/{invite} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }

    match /League/{league} {
      allow read: if true;
      allow update, delete: if isSignedIn() &&
          resource.data.members[request.auth.uid].admin == true;
      // Only allow a create if they are set as an admin.
      allow create: if isSignedIn() &&
          request.resource.data.members[request.auth.uid].admin == true;
    }

    match /LeagueDivision/{leagueDivision} {
      allow read: if true;
      allow update, delete: if isSignedIn();
      allow create: if isSignedIn() &&
          exists(/databases/$(database)/documents/LeagueSeason/$(request.resource.data.seasonUid));
    }

    match /LeagueSeason/{leagueSeason} {
      allow read: if true;
      allow write: if isSignedIn();
      allow create: if isSignedIn() &&
          exists(/databases/$(database)/documents/League/$(request.resource.data.leagueUid));
    }

    match /LeagueTeam/{leagueTeam} {
      allow read: if true;
      allow write: if isSignedIn();
    }

    match /MessageRecipients/{recipient} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
      allow list: if isSignedIn();
    }

    match /Messages/{message} {
      match /{ALLSUBCOLLECTIONS=**} {
            allow read: if isSignedIn();
            allow write: if isSignedIn();
      }
      allow read: if isSignedIn();
      allow write: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() &&
         request.resource.fromUid == request.auth.uid;
    }

    match /Seasons/{season} {
      allow read: if (isSignedIn() &&
        (resource.data.users[request.auth.uid].added)) ||
        isPublicVisible();
      allow update: if isSignedIn() &&
        incomingData().players.keys().size() > 0;
      allow delete: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() &&
         get(/databases/$(database)/documents/Teams/$(incomingData().teamUid)).data.admins[request.auth.uid] &&
         incomingData().players.keys().size() > 0;
    }

    match /Teams/{team} {
      match /Opponents/{opponent} {
        allow read: if isSignedIn();
        allow write: if isSignedIn();
      }
      allow read: if (isSignedIn() &&
        (existingData().users[request.auth.uid].added ||
        request.auth.uid in existingData().admins)) ||
        isPublicVisible();
      allow write: if isSignedIn();
      allow create: if isSignedIn() &&
        request.auth.uid in request.auth.uid in incomingData().admins;
    }

    // Main users table
    match /users/{userId} {
      allow read, update, delete: if isSignedInOnly() &&
          request.auth.uid == userId;
      allow list: if isSignedIn();
      allow create: if isSignedInOnly() && userId == request.auth.uid;
    }

    // UserData table (profile details).
    match /UserData/{userId} {
      allow read: if isSignedInOnly();
      allow update, delete: if isSignedInOnly() &&
          request.auth.uid == resource.id;
      allow list: if isSignedIn();
      allow create: if isSignedInOnly() &&
          userId == request.auth.uid &&
          incomingData().createdAt == request.time;
    }

    match /Players/{player} {
      allow update, delete: if isSignedIn() &&
          resource.data.user[request.auth.uid].added;
      allow create: if isSignedIn() &&
          request.resource.data.user[request.auth.uid].added;
      allow read: if isSignedIn() ||
          isPublicVisible();
    }
  }
}
