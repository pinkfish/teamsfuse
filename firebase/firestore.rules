rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Deny access to anything not specifically specified.
    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }

    // [READ] Data that exists on the Firestore document
    function existingData() {
      return resource.data;
    }
    
    // [WRITE] Data that is sent to a Firestore document
    function incomingData() {
      return request.resource.data;
    }

    function isSignedInOnly() {
      return request.auth != null;
    }

    function isSignedIn() {
      return request.auth != null &&
          request.auth.token != null &&
          "email_verified" in request.auth.token &&
          request.auth.token.email_verified == true;
    }

    function isUserOrAdmin(data) {
      return data.users[request.auth.uid].added ||
        request.auth.uid in data.data.admins ||
        data.isPublic;
    }

    function isAdmin(data) {
      return request.auth.uid in data.admins;
    }

    function isClubAdmin(data) {
      return data.members[request.auth.uid].admin;
    }

    function isUidCorrect() {
      return incomingData() != null && incomingData().uid == request.resource.id;
    }

    function isNotNull(data, property) {
       return property in data && data[property] != null;
    }

    function isNull(data, property) {
      return !(property in data) || data[property] == null;
    }

    function isEmpty(data, property) {
      return !(property in data) || data[property].keys().size() == 0;
    }

    function isNotEmpty(data, property) {
      return property in data && data[property].keys().size() > 0;
    }

    function isPlayerCorrect() {
      return incomingData() != null &&
         ((isNotEmpty(incomingData(), 'users') && isNull(incomingData(), 'opponentUid') && isNull(incomingData(), 'gameUid') && isNull(incomingData(), 'teamUid')) ||
          (isEmpty(incomingData(), 'users')  && isNotNull(incomingData(), 'opponentUid') && isNull(incomingData(), 'gameUid') && isNotNull(incomingData(), 'teamUid')) ||
           (isEmpty(incomingData(), 'users') && isNull(incomingData(), 'opponentUid') && isNotNull(incomingData(), 'gameUid') && isNull(incomingData(), 'teamUid')));
    }

    function isPublicVisible() {
      return "isPublic" in existingData() &&
        existingData().isPublic;
    }

    match /Clubs/{club} {
      match /News/{opponent} {
        // News is always publically visible.
        allow read: if true;
        allow create: if isSignedIn() && isUidCorrect() &&
          isClubAdmin(get(/databases/$(database)/documents/Clubs/$(incomingData().clubUid)).data);
        allow update, delete: if isSignedIn() &&
          isClubAdmin(get(/databases/$(database)/documents/Clubs/$(existingData().clubUid)).data);
      }
      match /Coaches/{opponent} {
        // Coaches are always publically visible.
        allow read: if true;
        allow create: if isSignedIn() && isUidCorrect() &&
          isClubAdmin(get(/databases/$(database)/documents/Clubs/$(incomingData().clubUid)).data);
        allow update, delete: if isSignedIn() &&
          isClubAdmin(get(/databases/$(database)/documents/Clubs/$(existingData().clubUid)).data);
      }
      allow read: if isSignedIn() || isPublicVisible();
      // Only allow writes when the member is setup correctly.
      allow update, delete: if isSignedIn() && isClubAdmin(existingData());
      allow create: if isSignedIn() && isUidCorrect() && isClubAdmin(incomingData()) ;
    }

    match /Games/{game} {
      match /GameEvents/{event} {
         allow read: if isSignedIn();
         allow update, delete: if isSignedIn();
         allow create: if isSignedIn() && isUidCorrect();
      }
      allow read: if isSignedIn() &&
         isUserOrAdmin(get(/databases/$(database)/documents/Seasons/$(existingData().seasonUid)).data);
      allow update, delete: if isSignedIn() &&
         isAdmin(get(/databases/$(database)/documents/Teams/$(resource.teamUid)).data);
      allow list: if isSignedIn();
      // Only allow a create if the shared data exists and the team exists.
      allow create: if isSignedIn() && isUidCorrect() &&
          existsAfter(/databases/$(database)/documents/GamesShared/$(incomingData().sharedDataUid)) &&
          exists(/databases/$(database)/documents/Teams/$(incomingData().teamUid)) &&
          exists(/databases/$(database)/documents/Seasons/$(incomingData().seasonUid));
    }

    match /GamesShared/{sharedGame} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
             allow create: if isSignedIn() && isUidCorrect() ;
    }

    match /Invites/{invite} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
      allow create: if isSignedIn() && isUidCorrect() ;
    }

    match /League/{league} {
      allow read: if true;
      allow update, delete: if isSignedIn() &&
          resource.data.members[request.auth.uid].admin == true;
      // Only allow a create if they are set as an admin.
      allow create: if isSignedIn() && isUidCorrect() &&
          request.resource.data.members[request.auth.uid].admin == true;
    }

    match /LeagueDivision/{leagueDivision} {
      allow read: if true;
      allow update, delete: if isSignedIn();
      allow create: if isSignedIn() && isUidCorrect() &&
          exists(/databases/$(database)/documents/LeagueSeason/$(request.resource.data.seasonUid));
    }

    match /LeagueSeason/{leagueSeason} {
      allow read: if true;
      allow write: if isSignedIn();
      allow create: if isSignedIn() && isUidCorrect() &&
          exists(/databases/$(database)/documents/League/$(request.resource.data.leagueUid));
    }

    match /LeagueTeam/{leagueTeam} {
      allow read: if true;
      allow write: if isSignedIn();
    }

    match /MessageRecipients/{recipient} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn && isUidCorrect() &&
          existsAfter(/databases/$(database)/documents/Messages/$(incomingData().messageId));
    }

    match /Messages/{message} {
      match /{ALLSUBCOLLECTIONS=**} {
            allow read: if isSignedIn();
            allow write: if isSignedIn();
      }
      allow read: if isSignedIn() &&
        (existingData().fromUid == request.auth.uid ||
         request.auth.uid in existingData().recipients);
      allow write: if isSignedIn() &&
         existingData().userId == request.auth.uid;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isUidCorrect() &&
         incomingData().fromUid == request.auth.uid &&
         incomingData().timeSent == request.time;
    }

    match /Seasons/{season} {
      allow read: if (isSignedIn() &&
        (resource.data.users[request.auth.uid].added) ||
        isPublicVisible());
      allow update: if isSignedIn() &&
        incomingData().players.keys().size() > 0;
      allow delete: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isUidCorrect() &&
         request.auth.uid in getAfter(/databases/$(database)/documents/Teams/$(incomingData().teamUid)).data.admins &&
         incomingData().players.keys().size() > 0;
    }

    match /Teams/{team} {
      match /Opponents/{opponent} {
        allow read: if isSignedIn();
        allow write: if isSignedIn();
      }
      allow read: if (isSignedIn() &&
        (existingData().users[request.auth.uid].added ||
        request.auth.uid in existingData().admins)) ||
        isPublicVisible();
      allow write: if isSignedIn();
      allow create: if isSignedIn() && isUidCorrect() &&
        request.auth.uid in request.auth.uid in incomingData().admins;
    }

    // Main users table
    match /users/{userId} {
      allow read, update, delete: if isSignedInOnly() &&
          request.auth.uid == userId;
      allow list: if isSignedIn();
      allow create: if isSignedInOnly() && isUidCorrect() && userId == request.auth.uid;
    }

    // UserData table (profile details).
    match /UserData/{userId} {
      allow read: if isSignedInOnly();
      allow update, delete: if isSignedInOnly() &&
          request.auth.uid == resource.id;
      allow list: if isSignedIn();
      allow create: if isSignedInOnly() && isUidCorrect()&&
          userId == request.auth.uid &&
          incomingData().createdAt == request.time;
    }

    match /Players/{player} {
      allow update, delete: if isSignedIn() && users in incomingData() &&
          incomingData().users[request.auth.uid].added || isEmpty(incomingData(), 'users');
      allow create: if isSignedIn() && isUidCorrect() && isPlayerCorrect();
      allow read: if isSignedIn() ||
          isPublicVisible();
    }

    match /Feedback/{feedback} {
      allow read: if isSignedIn();
      allow update, delete: if isSignedIn();
      allow create: if false;
    }
  }
}
